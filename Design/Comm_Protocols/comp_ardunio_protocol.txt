Ideas:

comp (master) - Arduino (slave)

Do some sort of encapsulation and decapsulation
	- Allows us to process both request kinematics and send haptics in same msg
	- sent: {Header for specific request { Header for controls { payload  } }
		- This way the arduino can service both requests sequentially
		- Get info on which module to send control to (Addresses)
			- So, only need to check header, decapsulate, then forward on to correct mod

Flow control?
- Ard only sends when told to do so
- Comp only asks for more when is done reading previous or at certain level left

What is max size message?
How long should timeout be for comp request before sending another?

Case 0: Initialization of glove communication
	- Need 2 way handshake to confirm connection working (Establish a connection)
		- Comp sends data msg to arduino and waits for response
	
	- Discovery of available controls
		- Could be useful for modularity (discover has access to tactile and/or force haptics)
		- Ard sends msg to each possible mod, then mod sends back msg with its hardcoded sensors/config
		- Ard can build out a map/table of all the possible sensors at its disposal
		- Ard then sends this map to the comp, so it can be used in game kinematics/control

Case 1: Computer wants orientation of sensors for kinematics
	- Comp Sent
		- Sets flag for kinematics request
		- Indicates addresses of sensors needed
 	- Arduino Sent
		- Sets flag for kinematics response
		- Payload contains data in specified ordering
	- Comp Sent
		- Confirmation? Maybe not enough time between requests
		- Could keep track of number of requests without recieving Ard to monitor health of connection

Case 2: Computer wants to send instructions to haptic control
	- Comp Sent
		- Sets flag for haptic control
		- Payload indicates sensor addresses with specified values for each
			- Potentially have value translation to abstract the process for the computer game
	- Arduino Sent
		- Sets flag for haptic response
		- Whether successful or not (Maybe no completely necessary)
			- Could judge from kinematic response msgs

Overall:
	- Comp sends {Kinematic Request { haptic controls } }
	- Arduino responds with { { Kinematic Data } Success of Previous Haptic control }
		- Comp waits for response
		- If too long without response, will send another control msg
			- Improves latency of system

Message Format:
- Comp sent:
	- Kinematic Request Header - Fixed size
		- Size of payload (Payload is haptic controls + controls header) 
		- If payload present (Haptic controls sent)
		- Addresses of requested sensor data
		- Type of sensor requested (Could be stated in addresses)
	- Haptic Controls Header
		- Size of payload
		-

Methods
- Serialize
	- Encode the message to be sent
- Deserialize
	- Decode messages recieved

Communication with Teensy
- Idea: have teensy for each "module" (Force, tactile, flex, etc..)

- Is it possible to communicate with each individually?
	- They would need to share the input buffer for serial, I think..
		- https://arduino.stackexchange.com/questions/9709/how-to-have-an-arduino-communicate-with-3-other-arduinos
	- Could do I2C for comm between ard and Teensys'
		- https://www.instructables.com/id/I2C-between-Arduinos/
		- Ard is master, teensys are the slaves
